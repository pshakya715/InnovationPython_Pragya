
# 1. Write a program that calculates and prints the value according to the given formula:
# Q = Square root of [(2*C*D)/H]
# Following are the fixed values of C and H:
# C is 50.
# H is 30.
# D is a variable whose values should be input to your program in a comma-separated sequence.

"""
import math


class Root(object):
    def __init__(self, c, h):
        self.c = c
        self.h = h

    def q(self):
        numbers = input("Enter numbers separated by comma: ")
        numbers = numbers.split(',')
        result_list = []

        for d in numbers:
            result_list.append(round(math.sqrt(2 * self.c * int(d) / self.h)))
            print(result_list)

x = Root(50, 30)
print(x.q())



"""
# 2. Define a class named Shape and its subclass Square. The Square class has an init function which
# takes length as argument. Both classes have an area function which can print the area of the shape
# where Shape’s area is 0 by default.

class Shape:

    def area(self):
        return 0

class Square(Shape):
    def __init__(self, length):
        Shape.__init__(self)
        self.length = length

    def area(self):
        return self.length * self.length

s = Square(6)
print(s.area())"""


# 3. Create a class to find three elements that sum to zero from a set of n real numbers
# Input array: [-25,-10,-7,-3,2,4,8,10]
# Expected output: [[-10,2,8],[-7,-3,10]]


class Solution(object):
    def threeSum(self, nums):
        nums.sort()
        res = []
        for i in range(len(nums)-1):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            l = i + 1
            r = len(nums) - 1
            while(l < r):
                sum = nums[i] + nums[l] + nums[r]
                if sum < 0:
                    l +=1
                elif sum > 0:
                    r -= 1
                else:
                    res.append([nums[i], nums[l], nums[r]])
                    while l<len(nums)-1 and nums[l] == nums[l + 1] :
                        l += 1
                    while r > 0 and nums[r] == nums[r-1]:
                        r -= 1
                    l += 1
                    r -= 1
        return res
inst = Solution()
print(inst.threeSum([-25,-10,-7,-3,2,4,8,10]))



# 4. Create a Time class and initialize it with hours and minutes.
# Create a method addTime which should take two Time objects and add them.
# E.g.- (2 hour and 50 min)+(1 hr and 20 min) is (4 hr and 10 min)
# Create another method displayTime which should print the time.
# Also create a method displayMinute which should display the total minutes in the Time.
# E.g.- (1 hr 2 min) should display 62 minute.
class Time:
    def __init__(self, hours, minutes):
        self.hours = hours
        self.minutes = minutes

    def addTime(t1, t2):
        t3 = Time(0, 0)
        if t1.minutes + t2.minutes > 60:
            t3.hours = (t1.minutes+t2.minutes)/60
        t3.hour = t3.hours+t1.hours+t2.hours
        t3.minutes = (t1.minutes + t2.minutes)-(((t1.minutes + t2.minutes)/60)*60)
        return t3

    def displayTime(self):
        print( "Time is ", self.hours, "hours and ", self.minutes, "minutes.")

    def displayMinute(self):
        print((self.hours*60)+self.minutes)


x = Time(2,50)
y = Time(1,20)
z = Time.addTime(x,y)
z.displayTime()
z.displayMinute()


# 5. Write a Person class with an instance variable “age” and a constructor that takes an integer as a
# parameter. The constructor must assign the integer value to the age variable after confirming the
# argument passed is not negative; if a negative argument is passed then the constructor should set
# age to 0 and print “Age is not valid, setting age to 0”. In addition, you must write the following instance
# methods:
# yearPasses() should increase age by the integer value that you are passing inside the function.
# amIOld() should perform the following conditional actions:I
# if age is between 0 and <13, print “You are young”.
# If age is >=13 and <=19 , print “You are a teenager".
# Otherwise, print “You are old”.
"""
class Person:
    def __init__(self, initialAge):
        if initialAge < 0:
            print('Age is not valid, setting age to 0.')
            self.age = 0

        else:
            self.age = initialAge

    def amIOld(self):
        if self.age < 13:
            print('You are young.')
        elif self.age >= 13 and self.age < 18:
            print('You are a teenager.')
        else:
            print('You are old.')

    def yearPasses(self):
        self.age += 1
t = int(input(""))
for i in range(0, t):
    age = int(input())
    p = Person(age)
    p.amIOld()
    for j in range(0, 3):
        p.yearPasses()
    p.amIOld()
    print('') """




